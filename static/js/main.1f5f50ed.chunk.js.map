{"version":3,"sources":["CryptoCard.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoCard","coinData","btc","res","circulating_supply","className","name","src","image","current_price","Intl","NumberFormat","style","currency","maximumFractionDigits","notation","compactDisplay","format","market_cap","symbol","Math","ceil","ommit","App","useState","allcoins","setAllcoins","coins","setcoins","setbtc","useEffect","a","fetch","response","json","console","log","onInput","event","value","target","toLowerCase","filteredcoins","filter","coin","includes","placeholder","x","map","index","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAsBeA,G,YAjBI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,IACxBC,EAAMD,EAAMD,EAASG,mBACzB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,eACVJ,EAASK,KACV,yBAAKD,UAAU,eAAc,yBAAKE,IAAKN,EAASO,UAEpD,yBAAKH,UAAU,cACX,6BAAK,mDAAsBJ,EAASQ,gBACpC,6BAAK,0CAAgB,IAAIC,KAAKC,aAAc,QAAS,CAAEC,MAAO,WAAYC,SAAU,MAAOC,sBAAuB,EAAEC,SAAU,UAAYC,eAAgB,UAAWC,OAAOhB,EAASiB,cACrL,6BAAK,iCAAOjB,EAASK,KAAhB,gCAAmD,IAAII,KAAKC,aAAc,QAAS,CAAEC,MAAO,WAAYC,SAAU,MAAOC,sBAAuB,EAAEC,SAAU,UAAYC,eAAgB,UAAWC,OAAOf,GAA1M,SAAsND,EAASkB,OAA/N,mBAAuPhB,EAAM,EAAI,IAAIO,KAAKC,aAAc,QAAS,CAAEC,MAAO,WAAYC,SAAU,MAAOC,sBAAuB,EAAIE,eAAgB,UAAWC,OAAOd,GAAO,IAAIO,KAAKC,aAAc,QAAS,CAAEC,MAAO,WAAYC,SAAU,MAAOC,sBAAuB,EAAIE,eAAgB,UAAWC,OAAOd,GAA9gB,mBAAoiBiB,KAAKC,MAAMnB,EAAMD,EAASiB,YAAcjB,EAASiB,WAAa,KAAlmB,UCZfI,EAAQ,CAAC,MAAO,OAAQ,OAAQ,QAgDvBC,MA9Cf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBJ,mBAAS,IAA/B,mBAAOtB,EAAP,KAAY2B,EAAZ,KA2BA,OAzBAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAG0BC,MAAM,4HAHhC,cAGSC,EAHT,gBAIoBA,EAASC,OAJ7B,OAIGjC,EAJH,uDAMGkC,QAAQC,IAAR,MACAnC,EAAW,GAPd,QASCyB,EAAYzB,GACZ2B,EAAS3B,GACT4B,EAAO5B,EAAS,GAAGiB,YAXpB,wDAAD,KAaC,IAYD,yBAAKb,UAAU,OACb,yBAAKA,UAAU,UACf,6DAEA,2BAAOA,UAAU,aAAagC,QAXd,SAAAC,GAClB,IAAMC,EAAQD,EAAME,OAAOD,MAAME,cAC3BC,EAAgBjB,EAASkB,QAAO,SAAAC,GAAI,MAAK,UAAGA,EAAKtC,MAAOmC,cAAcI,SAASN,MACrFX,EAASc,IAQ6CI,YAAY,eAEhE,yBAAKzC,UAAU,mBACdsB,EAAMgB,QAAO,SAAAI,GAAC,OAAIzB,EAAMuB,SAASE,EAAE5B,QAAU,KAAO4B,KAAGC,KAAI,SAACJ,EAAMK,GAAP,OAC1D,kBAAC,EAAD,CAAYC,IAAKD,EAAOhD,SAAU2C,EAAM1C,IAAKA,UCjCtCiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f5f50ed.chunk.js","sourcesContent":["import './CryptoCard.css';\nimport React from 'react';\n\n\n\nconst CryptoCard = ({ coinData, btc }) => {\n    let res = btc / coinData.circulating_supply;\n    return (\n        <div className=\"card\">\n            <div className=\"card__title\">\n                {coinData.name} \n                <div className=\"card__image\"><img src={coinData.image}/></div>\n                </div>\n            <div className=\"card__body\">\n                <div><p>Price per token: Â£{coinData.current_price}</p></div>\n                <div><p>Market cap: {new Intl.NumberFormat( 'en-GB', { style: 'currency', currency: 'GBP', maximumFractionDigits: 1,notation: \"compact\" , compactDisplay: \"short\" }).format(coinData.market_cap)}</p></div>\n                <div><p>If {coinData.name} had Bitcoin's market cap of {new Intl.NumberFormat( 'en-GB', { style: 'currency', currency: 'GBP', maximumFractionDigits: 1,notation: \"compact\" , compactDisplay: \"short\" }).format(btc)}, one {coinData.symbol} would be worth {res > 1 ? new Intl.NumberFormat( 'en-GB', { style: 'currency', currency: 'GBP', maximumFractionDigits: 2 , compactDisplay: \"short\" }).format(res) : new Intl.NumberFormat( 'en-GB', { style: 'currency', currency: 'GBP', maximumFractionDigits: 7 , compactDisplay: \"short\" }).format(res)} an increase of {Math.ceil((btc - coinData.market_cap) / coinData.market_cap * 100)}%</p></div>  \n            </div>\n        </div>\n    )\n};\n\nexport default CryptoCard;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CryptoCard from \"./CryptoCard\";\n\nconst ommit = ['btc', 'usdt', 'usdc', 'busd'];\n\nfunction App() {\n  const [allcoins, setAllcoins] = useState([]);\n  const [coins, setcoins] = useState([]);\n  const [btc, setbtc] = useState([])\n\n  useEffect(() => {\n    (async () => {\n      let coinData;\n      try {\n        const response = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=gbp&order=market_cap_desc&per_page=100&page=1&sparkline=false\");\n        coinData = await response.json();\n      } catch (error) {\n        console.log(error);\n        coinData = [];\n      }\n      setAllcoins(coinData);\n      setcoins(coinData);\n      setbtc(coinData[0].market_cap)\n    })();\n  }, []);\n\n\n  \n\n  const filterCards = event => {\n    const value = event.target.value.toLowerCase();\n    const filteredcoins = allcoins.filter(coin => (`${coin.name}`.toLowerCase().includes(value)));\n    setcoins(filteredcoins);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n      <h1>Bitcoin Market Cap Comparison\n      </h1>\n      <input className=\"search-box\" onInput={filterCards} placeholder=\"Search...\"/>\n      </div>\n      <div className=\"cards-container\">\n      {coins.filter(x => ommit.includes(x.symbol) ? null : x).map((coin, index) => (\n        <CryptoCard key={index} coinData={coin} btc={btc}/>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}